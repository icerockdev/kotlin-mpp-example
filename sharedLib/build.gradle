plugins {
    id 'com.android.library'
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}

group = 'sharedLib'
version = 1.0

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        fromPreset(presets.iosX64, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${Versions.coroutines_version}"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${Versions.serialization_version}"

                implementation "io.ktor:ktor-client:${Versions.ktor_version}"
                implementation "io.ktor:ktor-client-json:${Versions.ktor_version}"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        androidMain {

            android {
                compileSdkVersion Versions.compile_sdk


                defaultConfig {
                    minSdkVersion Versions.min_sdk
                }
                buildTypes {
                    release {
                        minifyEnabled true
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                }
            }

            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${Versions.coroutines_version}"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${Versions.coroutines_version}"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${Versions.serialization_version}"

                implementation "io.ktor:ktor-client-android:${Versions.ktor_version}"
                implementation "io.ktor:ktor-client-json-jvm:${Versions.ktor_version}"
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${Versions.coroutines_version}"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${Versions.serialization_version}"

                implementation "io.ktor:ktor-client-ios:${Versions.ktor_version}"
                implementation "io.ktor:ktor-client-json-ios:${Versions.ktor_version}"
            }
        }
    }
}

task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'sharedLib.framework/**'
            include 'sharedLib.framework.dSYM'
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}
